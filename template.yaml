AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Azubi Voice Assistant (azubi-va) - private s3 buckets + Polly Lambda function + HTTP API

Parameters:
  ProjectName:
    Type: String
    Default: azubi-va
    Description: The name of the project to be used as a prefix for resource names.

Globals:
  Function:
    Runtime: python3.12
    Timeout: 30
    MemorySize: 512
    Environment:
      Variables:
        URL_EXPIRY_SECONDS: '3600'
        MAX_CHARS: '3000'

Resources:
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-website-${AWS::AccountId}-${AWS::Region}-sam'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  AudioBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-audio-${AWS::AccountId}-${AWS::Region}-sam'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: ExpireOldAudio
            Status: Enabled
            ExpirationInDays: 14

  # Allow CloudFront (with OAC) to GET objects from the private website bucket
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudFrontRead
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub '${WebsiteBucket.Arn}/*'
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${WebsiteDistribution}'

  # CloudFront Origin Access Control (modern replacement for OAI)
  WebsiteOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${ProjectName}-oac'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
        Description: OAC for private S3 website origin

  # CloudFront distribution serving the private WebsiteBucket
  WebsiteDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        HttpVersion: http2
        Comment: !Sub '${ProjectName} distribution'
        PriceClass: PriceClass_100   # cheapest; change if you need global edge
        Origins:
          - Id: WebsiteS3Origin
            DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            S3OriginConfig: {}  # required by CFN even with OAC
            OriginAccessControlId: !Ref WebsiteOAC
        DefaultCacheBehavior:
          TargetOriginId: WebsiteS3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6   # AWS Managed-CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf  # AWS Managed-CORS-S3Origin (safe default)
          
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudFrontRead
            Effect: Allow
            Principal: { Service: cloudfront.amazonaws.com }
            Action: s3:GetObject
            Resource: !Sub '${WebsiteBucket.Arn}/*'
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${WebsiteDistribution}'



  PublicHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowOrigins: ['*']
        AllowHeaders: ['*']
        AllowMethods: ['OPTIONS','POST']

  TtsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-tts-${AWS::Region}-sam'
      CodeUri: backend/
      Handler: app.lambda_handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Sid: PollyAccess
              Effect: Allow
              Action:
                - polly:SynthesizeSpeech
              Resource: "*"
            - Sid: AudioBucketRW
              Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
                - s3:ListBucket
              Resource:
                - !GetAtt AudioBucket.Arn
                - !Sub '${AudioBucket.Arn}/*'
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Sub 'https://${WebsiteDistribution.DomainName}'
          AUDIO_BUCKET: !Ref AudioBucket
      Events:
        SpeakApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref PublicHttpApi
            Path: /speak
            Method: POST


Outputs:
  WebsiteBucketName:
    Value: !Ref WebsiteBucket
  AudioBucketName:
    Value: !Ref AudioBucket
  ApiEndpoint:
    Value: !Sub 'https://${PublicHttpApi}.execute-api.${AWS::Region}.amazonaws.com'
  CloudFrontDomain:
    Value: !GetAtt WebsiteDistribution.DomainName
    Description: Public HTTPS domain for your frontend (use this to access index.html)

